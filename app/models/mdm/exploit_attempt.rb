# An attempt to exploit {#host}.
class Mdm::ExploitAttempt < ActiveRecord::Base
  include MetasploitDataModels::Attempt

  #
  # Associations
  # @todo https://www.pivotaltracker.com/story/show/52327563
  #

  # @!attribute [rw] host
  #   Host that was attempted to be exploited.
  #
  #   @return [Mdm::Host]
  belongs_to :host, class_name: 'Mdm::Host', counter_cache: :exploit_attempt_count, inverse_of: :exploit_attempts

  # @!attribute [rw] loot
  #   Loot gathers from the successful exploit.
  #
  #   @return [Mdm::Loot, nil]
  belongs_to :loot, class_name: 'Mdm::Loot', inverse_of: :exploit_attempt

  # @!attribute [rw] module_class
  #   The module class that attempted the exploit.
  #
  #   @return [Mdm::Module::Class, nil]
  belongs_to :module_class, class_name: 'Mdm::Module::Class', inverse_of: :exploit_attempts

  # @!attribute [rw] service
  #   The service being exploited on {#host}.
  #
  #   @return [Mdm::Service, nil]
  belongs_to :service, class_name: 'Mdm::Service', inverse_of: :exploit_attempts

  # @!attribute [rw] session
  #   The session that was established when this attempt was successful.
  #
  #   @return [Mdm::Session]
  #   @return [nil] if session was not established.
  belongs_to :session, class_name: 'Mdm::Session', inverse_of: :exploit_attempt

  # @!attribute [rw] vuln
  #   The vulnerability that was attempted to be exploited.
  #
  #   @return [Mdm::Vuln, nil]
  belongs_to :vuln, class_name: 'Mdm::Vuln', inverse_of: :exploit_attempts

  #
  # Attributes
  #

  # @!attribute [rw] attempted_at
  #   When the attempt was made.
  #
  #   @return [DateTime]

  # @!attribute [rw] exploited
  #   Whether the attempt was successful.
  #
  #   @return [true] attempt was successful.
  #   @return [false] attempt was not successful.

  # @!attribute [rw] fail_detail
  #   A more verbose reason (compared to {#fail_reason} for the failure.
  #
  #   @return [String, nil]

  # @!attribute [rw] fail_reason
  #   Summary of why the attempt failed if {#exploited} is `false`.  For more details see {#fail_detail}.
  #
  #   @return [String, nil]

  # @!attribute [rw] module
  #   The full name of the exploit module that made the attempt.
  #
  #   @return [String]
  #   @todo Remove deprecated Mdm::Exploit#module (MSP-9281)

  # @!attribute [rw] port
  #   The port on {#host} which the exploit was attempted.
  #
  #   @return [Integer]
  #   @todo Mdm::ExploitAttempt#port and Mdm::ExploitAttempt#proto are obsolete and should be removed (MSP-9284)

  # @!attribute [rw] proto
  #   The protocol name used on {#port}.
  #
  #   @return [String]
  #   @todo Mdm::ExploitAttempt#port and Mdm::ExploitAttempt#proto are obsolete and should be removed (MSP-9284)

  # @!attribute [rw] username
  #   Name of user that made the attempt.  May be an {Mdm::User#name} or a system username.
  #
  #   @return [String]
  #   @todo https://www.pivotaltracker.com/story/show/52327563

  #
  # Validations
  #

  validates :host,
            presence: true

  #
  # Methods
  #

  # @deprecated Use {#service} to get the {Mdm::Service} and then access {Mdm::Service#port}.
  #
  # The port of the exploited service.
  #
  # @return [Integer] an {Mdm::Service#port}
  # @todo Mdm::ExploitAttempt#port and Mdm::ExploitAttempt#proto are obsolete and should be removed (MSP-9284)
  def port
    ActiveSupport::Deprecation.warn(
        "#{self.class}#port is deprecated.  " \
        "Use #{self.class}#service to get the Mdm::Service and then access Mdm::Service#port."
    )
    super
  end

  # @deprecated Set {#service} association.
  #
  # Sets the port of the service that was attempted to be exploited.
  #
  # @param port [Integer] an {Mdm::Service#port}
  # @return [void]
  # @todo Mdm::ExploitAttempt#port and Mdm::ExploitAttempt#proto are obsolete and should be removed (MSP-9284)
  def port=(port)
    ActiveSupport::Deprecation.warn(
        "#{self.class}#port= is deprecated.  " \
        "Set #{self.class}#service association instead."
    )
    super
  end

  # @deprecated Use {#service} to get the {Mdm::Service} and then access {Mdm::Service#proto}.
  #
  # The proto of the exploited service.
  #
  # @return [Integer] an {Mdm::Service#proto}
  # @todo Mdm::ExploitAttempt#port and Mdm::ExploitAttempt#proto are obsolete and should be removed (MSP-9284)
  def proto
    ActiveSupport::Deprecation.warn(
        "#{self.class}#proto is deprecated.  " \
        "Use #{self.class}#service to get the Mdm::Service and then access Mdm::Service#proto."
    )
    super
  end

  # @deprecated Set {#service} association.
  #
  # Sets the proto of the service that was attempted to be exploited.
  #
  # @param proto [Integer] an {Mdm::Service#proto}
  # @return [void]
  # @todo Mdm::ExploitAttempt#port and Mdm::ExploitAttempt#proto are obsolete and should be removed (MSP-9284)
  def proto=(proto)
    ActiveSupport::Deprecation.warn(
        "#{self.class}#proto= is deprecated.  " \
        "Set #{self.class}#service association instead."
    )
    super
  end

  ActiveSupport.run_load_hooks(:mdm_exploit_attempt, self)
end
