require 'spec_helper'

describe Mdm::ExploitAttempt do
  subject(:exploit_attempt) do
    described_class.new
  end

  it_should_behave_like 'Mdm::Attempt' do
    subject(:attempt) do
      exploit_attempt
    end
  end

  context 'associations' do
    it { should belong_to(:host).class_name('Mdm::Host') }
    it { should belong_to(:service).class_name('Mdm::Service') }
  end

  context 'database' do
    context 'columns' do
      it { should have_db_column(:host_id).of_type(:integer).with_options(null: false) }
      it { should have_db_column(:port).of_type(:integer) }
      it { should have_db_column(:proto).of_type(:string) }
      it { should have_db_column(:service_id).of_type(:integer) }
    end
  end

  context 'validations' do
    it { should validate_presence_of :host }
  end

  context 'factories' do
    context 'mdm_exploit_attempt' do
      subject(:mdm_exploit_attempt) do
        FactoryGirl.build(:mdm_exploit_attempt)
      end

      it { should be_valid }
    end
  end

  context '#destroy' do
    it 'should successfully destroy the object and all dependent objects' do
      exploit_attempt = FactoryGirl.create(:mdm_exploit_attempt)
      expect {
        exploit_attempt.destroy
      }.to_not raise_error
      expect {
        exploit_attempt.reload
      }.to raise_error(ActiveRecord::RecordNotFound)

    end
  end

  context '#port' do
    subject(:port) do
      exploit_attempt.port
    end

    it 'is deprecated' do
      expect(ActiveSupport::Deprecation).to receive(:warn).with(/Mdm::ExploitAttempt#port is deprecated/)

      port
    end

    context 'with attribute set' do
      #
      # lets
      #

      let(:expected) do
        22
      end

      #
      # Callbacks
      #

      before(:each) do
        exploit_attempt.port = expected
      end

      it 'reads attribute' do
        expect(port).to eq(expected)
      end
    end
  end

  context '#port=' do
    subject(:written_port) do
      exploit_attempt.port = port
    end

    let(:port) do
      22
    end

    it 'is deprecated' do
      expect(ActiveSupport::Deprecation).to receive(:warn).with(/Mdm::ExploitAttempt#port= is deprecated/)

      written_port
    end

    it 'can be read back with #port' do
      written_port

      expect(exploit_attempt.port).to eq(port)
    end
  end

  context '#proto' do
    subject(:proto) do
      exploit_attempt.proto
    end

    it 'is deprecated' do
      expect(ActiveSupport::Deprecation).to receive(:warn).with(/Mdm::ExploitAttempt#proto is deprecated/)

      proto
    end

    context 'with attribute set' do
      #
      # lets
      #

      let(:expected) do
        22
      end

      #
      # Callbacks
      #

      before(:each) do
        exploit_attempt.proto = expected
      end

      it 'reads attribute' do
        expect(proto).to eq(expected)
      end
    end
  end

  context '#proto=' do
    subject(:written_proto) do
      exploit_attempt.proto = proto
    end

    let(:proto) do
      22
    end

    it 'is deprecated' do
      expect(ActiveSupport::Deprecation).to receive(:warn).with(/Mdm::ExploitAttempt#proto= is deprecated/)

      written_proto
    end

    it 'can be read back with #proto' do
      written_proto

      expect(exploit_attempt.proto).to eq(proto)
    end
  end
end